Untyped Lambda Calculus Interpreter - リファレンスガイド

==================================================

概要
==================================================

本インタプリタは、型無しλ計算の式を対話的に評価するためのウェブベースのツールです。主な目的は、λ計算の学習、研究、および教育利用です。純粋なλ計算のルールに基づいた評価プロセスをステップごとに可視化する機能を持ち、名前付きの定義（コンビネータなど）を環境に保存して再利用できます。

==================================================
2. GUI (グラフィカルユーザーインターフェース)

インターフェースはウィンドウ全体を使用する動的なレイアウトを採用しています。

--- ヘッダー部 (画面上部) ---
画面上部には、以下のコントロールが左寄せで配置されています。

Title: "Untyped Lambda Calculus Interpreter"

Button Bar:

Evaluate (or Define): 入力欄の式を評価、または定義します。

Reset Definitions: 現在の環境（定義済み変数）をすべてクリアします。

Stop Evaluation: 現在実行中の評価を強制的に停止します。評価中にのみ表示されます。

Step Counter: Steps executed: ... 評価が実行されたステップ数を表示します。

--- メインコンテンツ部 (ヘッダー以下の全領域) ---
ヘッダー以下の領域は、3つの主要なエリアで構成され、ウィンドウサイズに応じて高さが動的に調整されます。高さの比率は概ね 入力:出力:環境 = 2:2:1 です。

Input Area (上段):
λ式や定義を入力するためのテキストエリアです。

Output Area (中段):
評価のプロセスと最終結果が表示されます。

評価中は、最新の評価ステップが表示されるように自動でスクロールします。

評価終了後は、【Final Result】などの最終行が表示されるように自動でスクロールします。

Environment Area (下段):
Current Environment ... という見出しの下に、現在定義されている名前とそのλ式のリストが表示されます。

==================================================
3. λ式の構文

--- 3.1. 基本構文 ---

+-----------------------+---------------------+--------------------------------------------------+
| 要素 | 構文 | 説明 |
+-----------------------+---------------------+--------------------------------------------------+
| 変数 (Variable) | x, y, myVar, v1 | 英数字とアンダースコア(_)からなる文字列。 |
| ラムダ抽象 (Abstraction)| λx.M または \x.M | 変数xを束縛する関数を定義します。Mはλ式です。 |
| 関数適用 (Application) | M N | 式Mを関数として、式Nを引数として適用します。 |
+-----------------------+---------------------+--------------------------------------------------+

関数適用は 左結合 です。つまり、M N Pは ((M N) P) と解釈されます。

--- 3.2. 優先順位と括弧 ---

括弧 (): 評価の順序を明示するために使用します。例えば、λx.(y z) は、yとzの適用結果を本体とする関数です。

--- 3.3. 特殊構文 ---

+------------------+---------------------+--------------------------------------------------+
| 機能 | 構文 | 説明 |
+------------------+---------------------+--------------------------------------------------+
| 定義 (Definition)| NAME = M | λ式MにNAMEという名前を付け、環境に保存します。 |
| 複数式の入力 | expr1; expr2; ... | セミコロン(;)で区切ることで、複数の式を一度に実行。|
| コメント (Comment) | // ... | // から行末までをコメントとして無視します。 |
+------------------+---------------------+--------------------------------------------------+

==================================================
4. 評価戦略

本インタプリタは 正規順序 (Normal-Order Reduction) に基づく評価戦略を採用しています。これは、簡約可能な最も左にある、最も外側のβレデックス（redex, (λx.M) N の形）を優先的に簡約する戦略です。この戦略は、もし正規形（それ以上簡約できない形）が存在するならば、必ずその正規形に到達することを保証しています。

==================================================
5. 内部的な動作

パース (Parsing): 入力文字列は、トークン化を経てAST（抽象構文木）に変換されます。

環境展開 (Environment Expansion): 評価の前に、式中の定義済み変数が対応するλ式に再帰的に置換されます。循環参照はエラーとして検出されます。

β簡約 (Beta Reduction): (λx.M) N という形の式は、M の中の自由変数 x をすべて N で置換した式 M[x := N] に簡約されます。

α変換 (Alpha Conversion): 置換時に変数名が衝突する「変数捕獲」を防ぐため、必要に応じて束縛変数の名前が新しい一意な名前に自動的に変更されます。

評価の停止 (Termination): 以下のいずれかの条件で評価は停止します。

式が正規形に達した（これ以上簡約できない）。

ユーザーが Stop Evaluation ボタンを押した。

評価ステップ数が内部的な上限（100,000ステップ）に達した。

==================================================
6. エラーメッセージ

+------------------------------------------+-------------------------------------------------+
| エラーの例 | 原因 |
+------------------------------------------+-------------------------------------------------+
| Parse error: ... | 構文エラー。括弧の不一致、不正な変数名など。 |
| Cyclic reference detected for: ... | f = g; g = f のような循環定義。 |
| Reduction step limit (...) reached. | 評価が規定のステップ数上限を超えた。無限ループの可能性。|
| Evaluation stopped by user. | ユーザーが停止ボタンを押した。 |
+------------------------------------------+-------------------------------------------------+

Untyped Lambda Calculus Interpreter - チュートリアルガイド

λ計算の世界へようこそ！このチュートリアルでは、インタプリタを使いながらλ計算の基本的な概念を楽しく学びます。

--- ステップ1: 最初のλ式を評価してみよう ---

λ計算の最も基本的な式の一つが、引数をそのまま返す 恒等関数 (Identity Function) です。

画面上部にある大きなテキストエリアが 入力欄 です。ここに次の式をコピー＆ペーストしてください。

(λx.x) y

λx.x は「xという名前の引数を受け取り、xをそのまま返す関数」です。

(λx.x) y は、その関数に引数 y を与えて実行（適用）することを意味します。

Evaluate (or Define) ボタン（入力欄のすぐ上にあります）をクリックします。

出力欄（入力欄のすぐ下）を見てみましょう。次のように表示されます。

【Input Expression】
(λx.x) y

【Evaluation Steps】
Initial: ((λx.x) y)
Step 1: y

【Final Result】
y

Step 1: で、関数 λx.x の x が引数 y で置き換えられ、結果が y になったことが分かります。これが β簡約 です。

--- ステップ2: 関数を定義して使ってみよう ---

何度も同じ関数を書くのは大変です。関数に名前を付けて保存しましょう。

まず、Reset Definitions ボタンを押して環境をリセットします。

入力欄に、恒等関数に ID という名前を付ける定義を書きます。

ID = λx.x

Evaluate (or Define) ボタンを押します。

一番下の 環境エリア に ID = (λx.x); と表示されたことを確認してください。

次に、この ID を使ってみましょう。入力欄に次のように入力します。

ID z

再度 Evaluate ボタンを押します。出力欄に 【After Environment Expansion】 という項目が表示され、インタプリタが ID を定義に置き換えてから評価を始めているのが分かります。最終的な結果は z になります。

--- ステップ3: もう少し複雑な例 - ブール代数 ---

λ計算では、関数だけで「真 (True)」「偽 (False)」「もし～なら (IF)」を表現できます。

Reset Definitions を押して環境をきれいにします。

以下の定義を 一度に 入力欄に貼り付けてください。セミコロン ; で複数の式を区切れます。

// TRUEは2つの引数を受け取り、1つ目を返す
TRUE = λx.λy.x;

// FALSEは2つの引数を受け取り、2つ目を返す
FALSE = λx.λy.y;

// IFは条件、真の場合の値、偽の場合の値を受け取る
IF = λc.λt.λf.c t f

Evaluate ボタンを押し、3つの関数を一度に定義します。

さあ、IF文を使ってみましょう！入力欄に以下のように入力します。

IF TRUE "apple" "banana"

Evaluate すると、最終的に apple になることが分かります。TRUE を FALSE に変えて試すと、今度は banana が返ってくるはずです！

--- ステップ4: 無限ループと停止ボタン ---

λ計算には、評価が終わらない式も存在します。

入力欄に次のように入力します。

(λx.x x) (λx.x x)

これは、簡約しても元の式に戻ってしまう無限ループの式です。

Evaluate ボタンを押します。

出力欄でステップ数がどんどん増えていくのが分かります。

このままでは終わらないので、Stop Evaluation ボタンをクリックしてください。

Evaluation stopped by user. と表示され、評価が安全に停止します。
